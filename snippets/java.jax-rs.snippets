# Variables
# $3 The java class name in CamelCase
# $3 RS Bean
# $1 a single entity in lowercase
# $4 a list of entities in lowercase
snippet jaxrs
	package ${5:java};

	import java.util.ArrayList;
	import java.util.Date;

	import javax.enterprise.context.RequestScoped;
	import javax.inject.Inject;
	import javax.ws.rs.Consumes;
	import javax.ws.rs.DELETE;
	import javax.ws.rs.GET;
	import javax.ws.rs.POST;
	import javax.ws.rs.PUT;
	import javax.ws.rs.Path;
	import javax.ws.rs.PathParam;
	import javax.ws.rs.Produces;
	import javax.ws.rs.core.Context;
	import javax.ws.rs.core.EntityTag;
	import javax.ws.rs.core.MediaType;
	import javax.ws.rs.core.Request;
	import javax.ws.rs.core.Response;
	import javax.ws.rs.core.UriInfo;

	import io.swagger.annotations.Api;
	import io.swagger.annotations.ApiOperation;
	import io.swagger.annotations.ApiResponse;
	import io.swagger.annotations.ApiResponses;

	@Path("/${1:entity}")
	@Api(value = "/$1")
	public class ${2:ClassName}Controller {

		@Inject
		private ${3:Model}Bean rs;

		@GET
		@Path("{id}")
		@Produces(MediaType.APPLICATION_JSON)
		@ApiOperation(value = "Find a $1 by ID", notes = "Returns a $1 or 404", response = $3.class)
		@ApiResponses(value = {
				@ApiResponse(code = 200, message = "OK"),
				@ApiResponse(code = 204, message = "Record not found - api v2"),
				@ApiResponse(code = 304, message = "Not modified (cache and e-Tag)"),
				@ApiResponse(code = 404, message = "Record not found"),
				@ApiResponse(code = 500, message = "Server Error") })
		public Response getById(@PathParam("id") Long id, @Context Request request)
		throws Exception {
			$3 $1;

			try {
				$1 = np.getById(id);
			} catch (Exception e) {
				throw new javax.ws.rs.NotFoundException($3.class.toString() + " for id " + id);
			}

			EntityTag etag = new EntityTag(Integer.toString($1.hashCode()));

			if (request.evaluatePreconditions(etag) != null) {
				return Response.notModified().build();
			}

			return Response.ok().entity($1).tag(etag).build();
		}

		@GET
		@Produces(MediaType.APPLICATION_JSON)
		@ApiOperation(value = "Get all $4", notes = "Returns a list of $1", response = $3.class)
		@ApiResponses(value = {
				@ApiResponse(code = 200, message = "OK"),
				@ApiResponse(code = 204, message = "Any record found"),
				@ApiResponse(code = 304, message = "Not modified (cache and e-Tag)"),
				@ApiResponse(code = 404, message = "Not found with errors") })
		public Response getAll(@Context Request request)
		throws Exception {

			ArrayList<$3> $4;
			$4 = (ArrayList<$3>) np.getAll();

			if ($4 == null || $4.isEmpty()) {
				return Response.noContent().build();
			}

			EntityTag etag = new EntityTag(Integer.toString($4.hashCode()));

			if (request.evaluatePreconditions(etag) != null) {
				return Response.notModified().build();
			}

			return Response.ok().entity($4).tag(etag).build();
		}

		@POST
		@Consumes(MediaType.APPLICATION_JSON)
		@Produces(MediaType.APPLICATION_JSON)
		@ApiOperation(value = "Create a $1", notes = "Returns an url for created $1", response = $3.class)
		@ApiResponses(value = {
				@ApiResponse(code = 201, message = "Created"),
				@ApiResponse(code = 400, message = "Something wrong on the request"),
				@ApiResponse(code = 500, message = "Server error and can not create a $1") })
		public Response create($3 $1, @Context UriInfo uriInfo)
		throws Exception {

			$3 no = np.create($1);

			return Response.created(uriInfo.getAbsolutePath()).entity(no).build();
		}

		@PUT
		@Consumes(MediaType.APPLICATION_JSON)
		@Produces(MediaType.APPLICATION_JSON)
		@ApiOperation(value = "Update a $1", notes = "Returns the updated $1", response = $3.class)
		@ApiResponses(value = {
				@ApiResponse(code = 200, message = "Updated"),
				@ApiResponse(code = 304, message = "Not modified (cache and e-Tag)"),
				@ApiResponse(code = 400, message = "Something wrong on the request"),
				@ApiResponse(code = 500, message = "Server error and can not update that $1") })
		public Response update($3 $1, @Context Request request)
		throws Exception {

			java.util.Date timestamp = new Date();
			EntityTag etag = new EntityTag(Integer.toString($1.hashCode()));

			if (request.evaluatePreconditions(timestamp, etag) != null) {
				return Response.notModified().build();
			}

			$3 pr = np.update($1);

			return Response.ok().entity(pr).build();
		}

		@DELETE
		@Path("{id}")
		@Consumes(MediaType.APPLICATION_JSON)
		@Produces(MediaType.APPLICATION_JSON)
		@ApiOperation(value = "Delete a $1", notes = "Returns if it works", response = $3.class)
		@ApiResponses(value = {
				@ApiResponse(code = 200, message = "Deleted"),
				@ApiResponse(code = 400, message = "Something wrong on the request"),
				@ApiResponse(code = 500, message = "Server error and can not delete that $1") })
		public Response delete(@PathParam("id") Long id)
		throws Exception {
			np.delete(id);
			return Response.ok().build();
		}
}
